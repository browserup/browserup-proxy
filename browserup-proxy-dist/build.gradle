/*
 * Modifications Copyright (c) 2019 BrowserUp, Inc.
 */

plugins {
    id 'application'
}

application {
    applicationDefaultJvmArgs = ['-DMITMPROXY_BINARY_PATH=mitmproxy/']
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (project.hasProperty("ossrhUsername") && project.hasProperty("ossrhPassword")) {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            addFilter('distribution') {artifact, file ->
                file.name.contains('.zip') || file.name.contains('.tar')
            }
            pom('distribution').artifactId = 'browserup-proxy'
            pom('distribution').project {
                name 'browserup-proxy'
                description 'BrowserUp Proxy'
                url 'https://github.com/browserup/browserup-proxy'

                scm {
                    connection 'scm:git:git@github.com:browserup/browserup-proxy.git'
                    developerConnection 'scm:git:git@github.com:browserup/browserup-proxy.git'
                    url 'https://github.com/browserup/browserup-proxy'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'browserup'
                        name 'BrowserUp, Inc.'
                        email 'developers@browserup.com'
                    }
                }
            }
        }
    }
}

dependencies {
    implementation project(':browserup-proxy-core')
    implementation project(':browserup-proxy-rest')

    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    implementation "com.google.inject:guice:${guiceVersion}"
    implementation "com.google.inject.extensions:guice-servlet:${guiceVersion}"
    implementation "com.google.inject.extensions:guice-multibindings:${guiceVersion}"
    implementation('com.google.sitebricks:sitebricks:0.8.11') {
        exclude(group: 'org.jboss.netty', module: 'netty')
        exclude(module: 'validation-api')
    }
    implementation "io.netty:netty-all:${nettyVersion}"

    implementation platform("org.apache.logging.log4j:log4j-bom:${log4jVersion}")
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl'

    implementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
    implementation "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
    implementation "org.javassist:javassist:${javassistVersion}"
}

applicationName = 'browserup-proxy'
mainClassName = 'com.browserup.bup.proxy.Main'

def mitmproxyLinuxURL = 'https://mitmproxy-linux.s3.us-east-2.amazonaws.com/mitmdump'.toURL()
def mitmproxyWindowsURL = 'https://mitmproxy-windows.s3.us-east-2.amazonaws.com/mitmdump.exe'.toURL()

static void downloadFile(URL srcUrl, File dstFile) {
    dstFile.withOutputStream { out ->
        srcUrl.withInputStream { from ->
            out << from
        }
    }
}

task downloadMitmproxyBinaries {
    File mitmproxyDir = file("$buildDir/mitmproxy")
    outputs.dir mitmproxyDir
    doLast {
        mitmproxyDir.mkdirs()
        println("Downloading mitmproxy dependencies...")
        def linuxBinaryFile = file("$buildDir/mitmproxy/mitmdump")
        def windowsBinaryFile = file("$buildDir/mitmproxy/mitmdump.exe")
        downloadFile(mitmproxyLinuxURL, linuxBinaryFile)
        downloadFile(mitmproxyWindowsURL, windowsBinaryFile)
        project.exec {
            commandLine('chmod', '+x', linuxBinaryFile.absolutePath)
            commandLine('chmod', '+x', windowsBinaryFile.absolutePath)
        }
        println("Downloaded mitmproxy dependencies.")
        mitmproxyDir
    }
}

distributions {
    main {
        baseName = 'browserup-proxy'
        contents {
            from '../LICENSE'
            from '../README.md'
            into ('ssl') {
                from '../browserup-proxy-core/src/main/resources/sslSupport'
            }
            from(downloadMitmproxyBinaries) {
                into 'bin/mitmproxy'
            }
        }
    }
}
